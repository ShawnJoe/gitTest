git 命令总结
暂存区：不止是待提交的文件的列表，也不是保存修改文件的修改位置，暂存区保存的修改文件
快照，保存所有的修改内容。

git init 
	git 仓库的初始化，会生成一个git 本地仓库
git add []   
	将工作区的修改复制到暂存区，可以跟单个文件，整个文件夹，或者所有的文件
git commit -m ""
	将暂存区的文件提交到本地仓库，形成一个版本和提交记录
git push
	将本地版本提交到远程记录
git pull
	从远程仓库拉取代码，并自动merge，相当于以下三条命令的和
git fetch origin master
	最常见的命令如取回origin 主机的master 分支：
	取回更新后，会返回一个FETCH_HEAD ，
指的是某个branch在服务器上的最新状态，我们可以在本地通过它查看刚取回的更新信息：
git log -p FETCH_HEAD

git merge FETCH_HEAD

git clone 
	从远程仓库克隆仓库， 
		--bare 选项可以创建一个裸版本库，裸版本库没有工作区，不能进行操作，
	可以当作共享版本库
git remote add origin https://github.com/ShawnJoe/gitTest.git
	本地仓库链接远程仓库
git status 
	查看当前工作区的修改，包括
git diff
	默认查看工作区和暂存区的区别
	--staged  显示的是下一次commit时会提交到HEAD的内容，就是版本库和暂存区的区别
	--cached: 对比暂存区(git add 之后)和版本库(git commit 之后)
	HEAD: 对比工作区(未 git add)和版本库(git commit 之后)
	
git reset HEAD XXX.txt
	将XXX.txt 文件从暂存区移除
		正常情况下，暂存区的文件将会被重写，这在通常情况下不会是一个问题，
	因为相同的修改可能仍会保存在工作区中。但是如果这个相同的文件在add 命令之后被
	进一步修改了，那么相关信息很可能被丢掉了（可能是删除了保存的快照）
	
git stash 
	将当前的工作区和暂存区的修改保存到存储的缓存，以存储栈的方式存储
	git stash pop 恢复第一个
	git stash list 列表
	git stash 

分支：
	git branch 
		查看当前所有分支，带*的表示当前分支
	git branch xxx
		创建新分支xxx，但是不切换,后面可以增加某次提交的hash值，或者某个分支名，
	git checkout xxx
		切换到分支 xxx 如果有的话，切换分支时如果还存在一些修改没有提交可以需要先提交修改，
	或者使用 --force 放弃这次修改，也可以使用stash 命令储存修改，然后进行切换。
	git checkout -b xxx 
		创建xxx 分支，并切换

	分支指针用于指向活动分支，他会每次提交时移动到最新的提交上。
	git branch -r 
		//查看远程所有分支
	git branch -a 
		//查看本地和远程的所有分支	
git reset --hard xxx
	xxx 表示某次提交记录的哈希值。强制返回到某次提交前的源码状态
	
通过变基净化历史 rebase
	将提交历史改造为比较平滑的线性历史。git 会让我们想要移动的提交序列
在目标分支上按照相同的顺序重新再现一遍，这就相当于我们为各个原提交做了个副本，
他们拥有相同的修改集，相同的作者，日期以及注释信息。